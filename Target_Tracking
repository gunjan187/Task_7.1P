import rospy
from duckietown_msgs.msg import Twist2DStamped, AprilTagDetectionArray

class ObjectFollower:
    def __init__(self):
        # Initialize ROS node
        rospy.init_node('object_follower_node', anonymous=True)
        rospy.loginfo("Object follower node initialized.")

        # Set shutdown behavior
        rospy.on_shutdown(self.on_shutdown_callback)

        # Initialize Publishers and Subscribers
        self.velocity_publisher = rospy.Publisher('/madtp/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        rospy.Subscriber('/madtp/apriltag_detector_node/detections', AprilTagDetectionArray, self.detection_callback, queue_size=1)

        # Initialize object detection variables
        self.object_found = False
        self.search_mode = True
        self.previous_object_found = False  # To track the previous object detection state

        rospy.spin()  # Keeps the node running and listening for messages

    # AprilTag Detection Callback
    def detection_callback(self, msg):
        rospy.loginfo("AprilTag detection message received.")
        self.control_robot(msg.detections)

    # Stop Robot before node shuts down. This ensures the robot stops moving when the node shuts down
    def on_shutdown_callback(self):
        rospy.loginfo("System shutting down. Halting robot...")
        self.halt_robot()

    # Sends zero velocity to stop the robot
    def halt_robot(self):
        stop_cmd = Twist2DStamped()
        stop_cmd.header.stamp = rospy.Time.now()
        stop_cmd.v = 0.0
        stop_cmd.omega = 0.0
        self.velocity_publisher.publish(stop_cmd)

    def control_robot(self, detections):
        # Control the robot based on object detection
        if len(detections) == 0:
            # No objects detected, enter search mode
            self.object_found = False
            self.search_mode = True
            rospy.loginfo("No objects detected, entering search mode.")
        else:
            # Object detected, switch to tracking mode
            self.object_found = True
            self.search_mode = False
            trans_x = detections[0].transform.translation.x
            trans_y = detections[0].transform.translation.y
            trans_z = detections[0].transform.translation.z
            rospy.loginfo("Object detected at x,y,z: %f %f %f", trans_x, trans_y, trans_z)

        # Publish velocity commands
        velocity_cmd = Twist2DStamped()
        velocity_cmd.header.stamp = rospy.Time.now()

        if self.search_mode:
            # "Search for an object" behavior
            velocity_cmd.v = 0.0  # Stop linear motion
            velocity_cmd.omega = 8.0  # Rotate in place to search for objects
            rospy.loginfo("Searching for object, rotating in place.")
        else:
            # "Track the Object" behavior
            if self.object_found and not self.previous_object_found:
                # Object detected after not being detected
                velocity_cmd.v = 0.0  # Stop all motion
                velocity_cmd.omega = 0.0
                rospy.loginfo("Object detected, stopping motion.")
            elif not self.object_found and self.previous_object_found:
                # Object lost after being detected
                velocity_cmd.v = 0.0  # Stop linear motion
                velocity_cmd.omega = 8.0  # Rotate in place to search for the object
                rospy.loginfo("Object lost, re-entering search mode.")
            else:
                # Object is continuously in view
                velocity_cmd.v = 0.0  # Stop linear motion
                velocity_cmd.omega = -trans_y / (trans_x + 0.00001)  # Rotate to keep the object centered in the field of view
                rospy.loginfo("Object in view, adjusting rotation to keep it centered.")

        self.previous_object_found = self.object_found  # Update the previous object detection state
        self.velocity_publisher.publish(velocity_cmd)
        rospy.loginfo("Published velocity command: v=%.2f, omega=%.2f", velocity_cmd.v, velocity_cmd.omega)

if __name__ == '__main__':
    try:
        object_follower_instance = ObjectFollower()
    except rospy.ROSInterruptException:
        pass
